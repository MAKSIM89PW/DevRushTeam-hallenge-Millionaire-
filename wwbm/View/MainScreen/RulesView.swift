//
//  RulesView.swift
//  wwbm
//
//  Created by Ваня Науменко on 27.02.24.
//

import SwiftUI

struct RulesView: View {
    @Environment(\.dismiss) var dismiss
    var body: some View {
        ZStack {

            Image(.frame1)
                .resizable()
                .ignoresSafeArea()

            ScrollView {
                VStack(alignment: .center, spacing: 20) {
                    Text("Правила игры «Кто хочет стать миллионером?»")
                        .font(.system(size: 25, weight: .bold, design: .serif))
                        .rotation3DEffect(Angle(degrees: 10), axis: (x: 10.0, y: 50, z: 20.0))
                    Rectangle()
                        .frame(height: 1)
                    Text("Кто хочет быть миллионером?  — это викторина, в которой участники должны правильно ответить на ряд вопросов с несколькими вариантами ответов, чтобы перейти на следующий уровень/вопрос. Всего существует 15 вопросов, каждый из которых стоит определенную сумму денег, и участники не имеют ограничений по времени, чтобы дать ответ. Участники также получают три линии жизни, которые помогут им, если они застрянут на определенном вопросе.")

                    Rectangle()
                        .frame(height: 1)
                    Text("Вопросы «Кто хочет стать миллионером» структурированы по пяти различным уровням, сложность каждого уровня увеличивается. Каждый уровень содержит три вопроса.")
                    Rectangle()
                        .frame(height: 1)
                    Text("Вопросы, сгруппированные на одном уровне, будут иметь одинаковую сложность. Вопросы 1–3 составляют первый уровень и содержат самые простые вопросы. Второй уровень (вопросы 4–6) будет немного сложнее, за ним следует третий уровень (вопросы 7–9). Четвертый уровень (вопросы 10–12) будет состоять из действительно сложных вопросов, за ним следует пятый и последний уровень (вопросы 13–15), на котором будут поставлены самые сложные вопросы игры.")
                    Rectangle()
                        .frame(height: 1)
                    Text("Важно помнить, что вопросы, составляющие каждый уровень, не обязательно будут относиться к одной и той же или даже схожей теме, но общий уровень их сложности будет одинаковым. Также обратите внимание, что уровни вопросов не следует путать с «безопасными зонами» или структурой значений вопросов, которые описаны ниже.")
                    Rectangle()
                        .frame(height: 1)
                    Text("В структуре вопросов есть три «безопасных гавани» (вопросы пять, десять и пятнадцать). Участники накапливают деньги за каждый правильный ответ, но если они ответят неправильно, не дойдя до безопасного места, они потеряют крупную сумму выигрыша.")
                    Text("Ниже приведено краткое описание структуры значения вопроса: \n Вопрос 1 — 100 рублей.\n Вопрос 2 — 200 рублей.\n Вопрос 3 — 300 рублей.\n Вопрос 4 — 500 рублей.\n Вопрос 5 — несгораемая сумма — 1000 рублей.")
//                    Rectangle()
//                        .frame(height: 1)
                    Text("Если участники ответят на этот вопрос неправильно, они уйдут ни с чем. Если на этот вопрос дан правильный ответ, участникам гарантирована 1000 рублей, даже если ответ будет неверным, прежде чем они доберутся до следующей несгораемой суммы в вопросе 10.")
                    Text("Вопрос 6 — 2 000 рублей .\n Вопрос 7 — 4 000 рублей.\n Вопрос 8 — 8 000 рублей.\n Вопрос 9 — 16 000 рублей.\n Вопрос 10 — 32 000 рублей.")
//                    Rectangle()
//                        .frame(height: 1)
                    Text("Если участники ответят на этот вопрос неправильно, они уйдут с 1000 рублей. Если на этот вопрос дан правильный ответ, участникам гарантировано 32 000 рублей, даже если ответ будет неправильным до перехода к вопросу 15.")
                    Rectangle()
                        .frame(height: 1)
                    Text("Вопрос 11 — 64 000 рублей.\n Вопрос 12 — 125 000 рублей.\n Вопрос 13 — 250 000 рублей.\n Вопрос 14 — 500 000 рублей.\n Вопрос 15 — 1 000 000 рублей.")
                    Rectangle()
                        .frame(height: 1)
                    Text("Подсказки")
                        .font(.system(size: 25, weight: .bold, design: .serif))
                        .rotation3DEffect(Angle(degrees: 10), axis: (x: 10.0, y: 50, z: -20.0))
                        .foregroundStyle(.green)
                    Rectangle()
                        .frame(height: 1)
                    Text(" Участникам разрешено три подсказки, которые они могут использовать в любой момент игры. Каждую подсказку можно использовать только один раз.")
                    VStack {
                        Text(" «50/50» ")
                            .foregroundColor(Color.green)
                        Text(" удаляет два неправильных ответа из выбора с несколькими вариантами ответов, оставляя участнику только один правильный и один неправильный вариант. Это означает, что у них есть шансы 50/50. ")
//                            .border(Color.black)
                    }

                    VStack {
                        Text("«Спросите аудиторию»")
                            .foregroundStyle(.green)

                        Text("зрителям задают тот же вопрос, что и участнику, и проводится быстрый опрос, чтобы показать их ответы. Если диаграмма показывает явное большинство за конкретный ответ, эта подсказка может быть чрезвычайно полезной, но участник все равно должен решать, следовать ли результатам, полученным от аудитории, или нет.")
//                            .border(Color.black)
                    }
                    VStack {
                        Text("«Позвоните другу»")
                            .foregroundStyle(.green)
                        Text("участникам разрешено позвонить другу или члену семьи в течение 30 секунд и спросить, знают ли они ответ на вопрос.")
//                            .border(Color.black)
                    }
                }
                .padding()
                .foregroundStyle(Color(red: 1, green: 0.9, blue: 0.8))
                .font(.system(size: 15, weight: .bold, design: .serif))
                .multilineTextAlignment(.center)
            }

            .preferredColorScheme(.dark)

            .navigationBarBackButtonHidden()
            .toolbar {
                ToolbarItem(placement: .topBarLeading) {
                    Button(action: {
                        dismiss()
                    }, label: {
                        Image(systemName: "chevron.left")
                    })
                }
            }
        }
    }
}

#Preview {
    RulesView()
}
